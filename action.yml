name: 'Simple Teams Webhook Message'
description: 'Post a message with optional image and extra text blocks into a Teams channel using workflows'
author: 'Tim Lolkema'
branding:
  icon: 'message-square'
  color: 'blue'

inputs:
  message_title:
    description: 'Title of the message'
    required: true
  message_description:
    description: 'Description of the message'
    required: true
  webhook:
    description: 'Webhook URL for the Teams channel'
    required: true
  image_url:
    description: 'URL of the image to include in the message (optional)'
    required: false
  extra_text_blocks:
    description: 'Additional text blocks to include in the message, separated by ||| (optional)'
    required: false

runs:
  using: "composite"
  steps:
    - name: teams-message
      shell: bash
      id: teams_message_curl
      env:
        TEAMS_WEBHOOK: ${{ inputs.webhook }}
      run: |

        # Construct the content based on whether an image is provided
        if [ ! -z "${{ inputs.image_url }}" ]; then
          MAIN_CONTENT=$(cat << EOF
          {
            "type": "ColumnSet",
            "columns": [
              {
                "type": "Column",
                "width": "auto",
                "items": [
                  {
                    "type": "Image",
                    "url": "${{ inputs.image_url }}",
                    "size": "Medium",
                    "style": "Person"
                  }
                ]
              },
              {
                "type": "Column",
                "width": "stretch",
                "items": [
                  {
                    "type": "TextBlock",
                    "size": "Large",
                    "weight": "Bolder",
                    "text": "${{ inputs.message_title }}",
                    "wrap": true
                  },
                  {
                    "type": "TextBlock",
                    "text": "${{ inputs.message_description }}",
                    "wrap": true
                  }
                ]
              }
            ]
          }
        EOF
        )
        else
          MAIN_CONTENT=$(cat << EOF
          {
            "type": "TextBlock",
            "size": "Large",
            "weight": "Bolder",
            "text": "${{ inputs.message_title }}",
            "wrap": true
          },
          {
            "type": "TextBlock",
            "text": "${{ inputs.message_description }}",
            "wrap": true
          }
        EOF
        )
        fi

        # Construct extra text blocks if provided
        EXTRA_TEXT_BLOCKS=""
        IFS='|||' read -ra BLOCKS <<< "${{ inputs.extra_text_blocks }}"
        for BLOCK in "${BLOCKS[@]}"; do
          EXTRA_TEXT_BLOCKS+=$(cat << EOF
          ,
          {
            "type": "TextBlock",
            "text": "${BLOCK}",
            "wrap": true
          }
        EOF
        )
        done

        CARD_JSON=$(cat << EOF
        {
          "type": "message",
          "attachments": [
            {
              "contentType": "application/vnd.microsoft.card.adaptive",
              "contentUrl": null,
              "content": {
                "type": "AdaptiveCard",
                "body": [
                  ${MAIN_CONTENT}
                  ${EXTRA_TEXT_BLOCKS}
                ],
                "actions": [
                  {
                    "type": "Action.OpenUrl",
                    "title": "CI-run",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                ],
                "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                "version": "1.2"
              }
            }
          ]
        }
        EOF
        )

        # Send the Adaptive Card to Teams
        curl -H "Content-Type: application/json" -d "$CARD_JSON" $TEAMS_WEBHOOK -o result.json

    - name: read json, move to setp outpu
      id: read_result_json
      run: echo "::set-output name=result_json::$(cat workspaces.json)"
      shell: bash

    - name: force failure if json result has error
      run: exit 1
      if: fromJson(steps.read_result_json.result_json).error
      shell: bash

